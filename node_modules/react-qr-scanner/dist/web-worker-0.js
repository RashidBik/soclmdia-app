(function (BinaryBitmap, HybridBinarizer, RGBLuminanceSource, QRCodeReader) {
  'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var BinaryBitmap__default = /*#__PURE__*/_interopDefaultLegacy(BinaryBitmap);
  var HybridBinarizer__default = /*#__PURE__*/_interopDefaultLegacy(HybridBinarizer);
  var RGBLuminanceSource__default = /*#__PURE__*/_interopDefaultLegacy(RGBLuminanceSource);
  var QRCodeReader__default = /*#__PURE__*/_interopDefaultLegacy(QRCodeReader);

  var toGrayscaleBuffer = function toGrayscaleBuffer(imageBuffer, width, height) {
    var grayscaleBuffer = new Uint8ClampedArray(width * height);

    for (var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++) {
      var gray = void 0;
      var alpha = imageBuffer[i + 3]; // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent
      // black (0 alpha, and then 0 RGB). They are often used, of course as the "white" area in a
      // barcode image. Force any such pixel to be white:

      if (alpha === 0) {
        gray = 0xFF;
      } else {
        var pixelR = imageBuffer[i];
        var pixelG = imageBuffer[i + 1];
        var pixelB = imageBuffer[i + 2]; // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),
        // (306*R) >> 10 is approximately equal to R*0.299, and so on.
        // 0x200 >> 10 is 0.5, it implements rounding.

        gray = 306 * pixelR + 601 * pixelG + 117 * pixelB + 0x200 >> 10;
      }

      grayscaleBuffer[j] = gray;
    }

    return grayscaleBuffer;
  };

  var reader = new QRCodeReader__default["default"]();
  self.addEventListener('message', function (e) {
    // eslint-disable-line no-restricted-globals
    try {
      var luminances = toGrayscaleBuffer(e.data.data, e.data.width, e.data.height);
      var luminanceSource = new RGBLuminanceSource__default["default"](luminances, e.data.width, e.data.height);
      var hybridBinarizer = new HybridBinarizer__default["default"](luminanceSource);
      var binaryBitmap = new BinaryBitmap__default["default"](hybridBinarizer);
      var decoded = reader.decode(binaryBitmap);
      postMessage(decoded);
    } catch (err) {
      postMessage(null);
    }
  });

})(BinaryBitmap, HybridBinarizer, RGBLuminanceSource, QRCodeReader);

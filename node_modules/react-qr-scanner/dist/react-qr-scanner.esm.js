import React, { useRef, useState, useMemo, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function createURLWorkerFactory(url) {
    return function WorkerFactory(options) {
        return new Worker(url, options);
    };
}

var WorkerFactory = createURLWorkerFactory('web-worker-0.js');
/* eslint-enable */

var _excluded = ["constraints", "onError", "onLoad", "onScan", "resolution"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var createWorker = function createWorker() {
  return new WorkerFactory();
};

var stopMediaStream = function stopMediaStream(stream) {
  if (stream) {
    if (stream.getVideoTracks && stream.getAudioTracks) {
      stream.getVideoTracks().map(function (track) {
        stream.removeTrack(track);
        track.stop();
      });
      stream.getAudioTracks().map(function (track) {
        stream.removeTrack(track);
        track.stop();
      });
    } else {
      stream.stop();
    }
  }
};

var Reader = function Reader(props) {
  var constraints = props.constraints,
      onError = props.onError,
      onLoad = props.onLoad,
      onScan = props.onScan,
      resolution = props.resolution,
      other = _objectWithoutProperties(props, _excluded);

  var constraintsStr = JSON.stringify(constraints);
  var streamRef = useRef(null);
  var videoEl = useRef(null);
  var canvasEl = useRef(document.createElement('canvas'));
  var ctxRef = useRef(null);
  var requestRef = useRef();

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      src = _useState2[0],
      setSrc = _useState2[1];

  var isProcessingRef = useRef(false);
  var worker = useMemo(createWorker, [createWorker]);
  useEffect(function () {
    return function () {
      worker.terminate();
    };
  }, [worker]);
  useEffect(function () {
    worker.onmessage = function (e) {
      if (onScan) onScan(e.data ? _objectSpread(_objectSpread({}, e.data), {}, {
        canvas: canvasEl.current
      }) : null);
      isProcessingRef.current = false;
    };
  }, [onScan, worker]);
  var check = useCallback(function () {
    var videoIsPlaying = videoEl.current && videoEl.current.readyState === videoEl.current.HAVE_ENOUGH_DATA;

    if (!isProcessingRef.current && videoIsPlaying) {
      isProcessingRef.current = true; // Get image/video dimensions

      var width = videoEl.current.videoWidth;
      var height = videoEl.current.videoHeight;
      var greatestSize = width > height ? width : height;
      var ratio = resolution / greatestSize;
      height = ratio * height;
      width = ratio * width;
      canvasEl.current.width = width;
      canvasEl.current.height = height;
      ctxRef.current = canvasEl.current.getContext('2d');
      ctxRef.current.drawImage(videoEl.current, 0, 0, width, height);
      var imageData = ctxRef.current.getImageData(0, 0, width, height); // Send data to web-worker

      worker.postMessage(imageData);
    }

    requestRef.current = requestAnimationFrame(check);
  }, [resolution, worker]);
  useEffect(function () {
    var constraints = JSON.parse(constraintsStr);
    var isSubscribed = true;
    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
      if (!isSubscribed) {
        stopMediaStream(stream);
      } else {
        streamRef.current = stream;

        try {
          if (videoEl.current) {
            videoEl.current.srcObject = stream;
            videoEl.current.setAttribute('playsinline', true); // required to tell iOS safari we don't want fullscreen
          }
        } catch (error) {
          setSrc(window.URL.createObjectURL(stream));
        }

        if (onLoad) onLoad();
        requestRef.current = requestAnimationFrame(check);
      }
    })["catch"](function (error) {
      return isSubscribed ? onError(error) : null;
    });
    return function () {
      cancelAnimationFrame(requestRef.current);
      isSubscribed = false;
      stopMediaStream(streamRef.current);

      if (src) {
        window.URL.revokeObjectURL(src);
      }
    };
  }, [check, constraintsStr, onError, onLoad]);
  return /*#__PURE__*/React.createElement("video", _extends({
    autoPlay: true,
    playsInline: true,
    src: src,
    ref: videoEl
  }, other));
};

Reader.propTypes = {
  constraints: PropTypes.object,
  onError: PropTypes.func.isRequired,
  onLoad: PropTypes.func,
  onScan: PropTypes.func.isRequired,
  resolution: PropTypes.number
};
Reader.defaultProps = {
  constraints: {
    audio: false,
    video: true
  },
  resolution: 640
};

export { Reader as default };
